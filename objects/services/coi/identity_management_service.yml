name: identity_management

docstring: |
  Stores identities of users and resources, including bindings of internal
  identities to external identities. Also stores metadata such as a user profile.

dependencies: [resource_registry]


methods:
  # -----------------
  # Working with internal actor identities (users, agents etc)

  create_actor_identity:
    docstring: |
      Persists the provided ActorIdentity object. The id string returned
      is the internal id by which users should be represented in message
      headers for policy enforcement, etc. 
    in:
      actor_identity: !ActorIdentity
    out:
      actor_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute

  update_actor_identity:
    docstring: |
      Updates the provided ActorIdentity object.  Throws NotFound exception if
      an existing version of ActorIdentity is not found.  Throws Conflict if
      the provided ActorIdentity object is not based on the latest persisted
      version of the object.
    in:
      actor_identity: !ActorIdentity
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist
      Conflict: object not based on latest persisted object version

  read_actor_identity:
    docstring: |
      Returns the ActorIdentity object for the specified user id.
      Throws exception if id does not match any persisted ActorIdentity
      objects.
    in:
      actor_id: ""
    out:
      actor_identity: !ActorIdentity
    throws:
      NotFound: object with specified id does not exist

  delete_actor_identity:
    docstring: |
      For now, permanently deletes ActorIdentity object with the specified
      id. Throws exception if id does not match any persisted ActorIdentity.
    in:
      actor_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  find_actor_identity_by_name:
    docstring: |
      Return the ActorIdentity object whose name attribute matches the passed value.
    in:
      name: ""
    out:
      user_info: !ActorIdentity
    throws:
      NotFound: failed to find ActorIdentity
      Inconsistent: Multiple ActorIdentity objects matched name


  # -----------------
  # Working with external identities and identity providers

  register_user_credentials:
    docstring: |
      Persists new UserCredentials object. Then establishes an association
      with the ActorIdentity object identified by the passed actor_id.
    in:
      actor_id: ""
      credentials: !UserCredentials
    out:
    throws:
      BadRequest: if object passed has _id or _rev attribute or association creation fails
      NotFound: ActorIdentity object does not exist

  unregister_user_credentials:
    docstring: |
      For now, permanently deletes the UserCredential object with the
      specified name.  The association between the UserCredential object
      and the ActorIdentity object indicated by the passed actor_id is
      also deleted.
    in:
      actor_id: ""
      credentials_name: ""
    out:
    throws:
      NotFound: if UserCredential or association do not exist


  # -----------------
  # Working with users and their information (profile)

  create_user_info:
    docstring: |
      Persists new UserInfo object. Then establishes an association with
      the ActorIdentity object identified by the passed actor_id.
    in:
      actor_id: ""
      user_info: !UserInfo
    out:
      user_info_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute or association creation fails
      NotFound: ActorIdentity object does not exist

  update_user_info:
    docstring: |
      Updates the provided UserInfo object.  Throws NotFound exception if
      an existing version of UserInfo is not found.  Throws Conflict if
      the provided UserInfo object is not based on the latest persisted
      version of the object.
    in:
      user_info: !UserInfo
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist
      Conflict: object not based on latest persisted object version

  read_user_info:
    docstring: |
      Returns the UserInfo object for the specified user id.
      Throws exception if id does not match any persisted UserInfo
      objects.
    in:
      user_info_id: ""
    out:
      user_info: !UserInfo
    throws:
      NotFound: object with specified id does not exist

  delete_user_info:
    docstring: |
      For now, permanently deletes the UserInfo object with the
      specified id.  The association between the UserInfo object
      and the ActorIdentity object is also deleted.
    in:
      user_info_id: ""
      actor_identity_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist or association could not be found

  find_user_info_by_id:
    docstring: |
      Return the UserInfo object associated with the ActorIdentity object
      identified by the passed user id.
    in:
      actor_id: ""
    out:
      user_info: !UserInfo
    throws:
      NotFound: failed to find ActorIdentity, association or UserInfo object

  find_user_info_by_name:
    docstring: |
      Return the UserInfo object whose name attribute matches the passed value.
    in:
      name: ""
    out:
      user_info: !UserInfo
    throws:
      NotFound: failed to find UserInfo
      Inconsistent: Multiple UserInfo objects matched name

  find_user_info_by_subject:
    docstring: |
      Return the UserInfo object associated with the ActorIdentity object
      which is associated with the UserCredential with subject matching
      the passed value.
    in:
      subject: ""
    out:
      user_info: !UserInfo
    throws:
      NotFound: failed to find UserCredential, ActorIdentity, association or UserInfo object

  # -----------------
  # Utility methods for users authenticating
  
  signon:
    docstring: |
      Validates the certificate. If legit, extracts the subject line and searches
      all UserCredentials objects looking for a match.
      - If found, a lookup is performed on the association to the ActorIdentity object.
      If found, a lookup is performed to see if there is an associated UserInfo object.
      The ActorIdentity object id is returned along with the boolean True to indicate
      whether a UserInfo object was found (this is a known user who has registered).
      - If not found, a new ActorIdentity object is created, a new UserCredentials
      object is create, and an association is established between the two. The object
      id of the ActorIdentity object is returned with the boolean False to indicate
      this is a new user who needs to register.
    in:
      certificate: ""
      ignore_date_range: False
    out:
      actor_id: ""
      valid_til: ""
      registered: False      
    throws:
      BadRequest: if certificate is not valid
      NotFound: Something bad happened in the registry such that an object or association got lost
      ServerError: More than one UserCredentials object was associated with the certificate subject


#-------

  get_user_info_extension:
    docstring: |
      Returns an UserInfoExtension object containing additional related information
    in:
      user_info_id: ""
    out:
      user_info: !UserInfoExtension
    throws:
      BadRequest: A parameter is missing
      NotFound: An object with the specified user_info_id does not exist


#------

  initiate_account_merge:
    docstring: |
      Initiates account merge
    in:
      merge_user_email: ""
    out:
      throws:
        BadRequest: A parameter is missing
        NotFound: Merge user email address is not found

#----
  complete_account_merge:
    docstring: |
      Complete account merge by verifying the token string
    in:
      token_string: ""
    out:
      throws:
        BadRequest: A parameter is missing
        NotFound: Token string not found
