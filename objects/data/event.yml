# Base type for all events in the system
#
# See Events and Notification hierarchy here:
#   https://confluence.oceanobservatories.org/display/syseng/CIAD+DM+SV+Events+and+Notifications
#
Event:
  origin: ""        # the origin of the event (content specific to subtype). Mostly a resource id
  origin_type: ""   # the type of origin (e.g. resource type, etc) or empty
  description: ""   # readable description of the event (not required)
  ts_created: ""    # timestamp of event created in millis in UNIX epoch
  base_types: []    # List of event super types
  sub_type: ""      # A specialization of the event_type expressed by this object type (or empty)

---

# ------------------------------------------------------------------------------------
#                                  ION Events
# ------------------------------------------------------------------------------------


# ------------------------------------------------------------------------------------
# Resource Events
# Events about the registration of a resource in the registry and its lifecycle
#
# origin: set to the resource_id
# origin_type: the type of resource
# sub_type: event specific
# ------------------------------------------------------------------------------------

# Base type for resource related events in the system
ResourceEvent: !Extends_Event
  # The origin is the resource id

---
# Event indicating that a resource changed its life cycle or was created
ResourceLifecycleEvent: !Extends_ResourceEvent
  old_state: ""
  new_state: ""
  transition_event: ""
  resource_type: ""

# Event indicating that a (taskable) resource was commanded and a result is available
ResourceCommandEvent: !Extends_ResourceEvent
  command: ""
  result: ""

# Event created by an operator of a resource, for instance to manually indicate a modification or error.
ResourceOperatorEvent: !Extends_ResourceEvent

# Event indicating that resource metadata was changed or the resource was created or deleted
ResourceModifiedEvent: !Extends_ResourceEvent
  mod_type: !enum (name=ResourceModificationType, values=(CREATE, UPDATE, RETIRE, DELETE), default=UPDATE)

---
# DataSource Events
ExternalDataSourceEvent: !Extends_ResourceEvent

ExternalDataSourceStatusEnum: !enum (values=(ONLINE, OFFLINE), default=OFFLINE)

---

ExternalDatasetAddedEvent: !Extends_ExternalDataSourceEvent
  dataset_information: {}

ExternalDatasetRemovedEvent: !Extends_ExternalDataSourceEvent
  dataset_information: {}

ExternalDatasetChangedEvent: !Extends_ExternalDataSourceEvent
  dataset_information: {} # Not really sure what this will be...

ExternalDataSourceStatusEvent: !Extends_ExternalDataSourceEvent
  status: !ExternalDataSourceStatusEnum


# ------------------------------------------------------------------------------------
# Agent Events
# Events about an agent in the system (but not about the controlled device or the registry entry)
# origin: the resource_id of the agent
#  origin_type: type of agent resource
#  sub_type: event specific
# ------------------------------------------------------------------------------------

ResourceAgentEvent: !Extends_Event
---

ResourceAgentCommandEvent: !Extends_ResourceAgentEvent
  command: ""
  execute_command: ""
  args: []
  kwargs: {}
  result: ""

ResourceAgentErrorEvent: !Extends_ResourceAgentEvent
  command: ""
  execute_command: ""
  args: []
  kwargs: {}
  error_type: ""
  error_msg: ""
  error_code: -1

ResourceAgentStateEvent: !Extends_ResourceAgentEvent
  state: ""

ResourceAgentResourceStateEvent: !Extends_ResourceAgentEvent
  state: ""

ResourceAgentResourceConfigEvent: !Extends_ResourceAgentEvent
  config: {}

ResourceAgentAsyncResultEvent: !Extends_ResourceAgentEvent
  command: ""
  desc: ""
  result: ""

---

# ------------------------------------------------------------------------------------
# Device Events
# Events from a resource agent about the manipulation of an external taskable resource (called "device")
# origin: resource_id of the device
#  origin_type: type of device resource
#  sub_type: event specific
# ------------------------------------------------------------------------------------

# Base type of events related to physical devices such as instruments
DeviceEvent: !Extends_Event
    # The origin is a device (resource) id

---
DeviceSpecificLifecycleEvent: !Extends_DeviceEvent

DeviceCommonLifecycleEvent: !Extends_DeviceEvent

DeviceCommandEvent: !Extends_ResourceCommandEvent

DeviceOperatorEvent: !Extends_ResourceOperatorEvent

---
PlatformEvent: !Extends_DeviceEvent

---

TelemetryStatusType: !enum (values=(AVAILABLE, UNAVAILABLE), default=UNAVAILABLE)

---

PlatformTelemetryEvent: !Extends_PlatformEvent
  status: !TelemetryStatusType

PublicPlatformTelemetryEvent: !Extends_PlatformEvent
  status: !TelemetryStatusType

RemoteCommandTransmittedEvent: !Extends_PlatformEvent
  queue_size: 0



RemoteCommandResult: !Extends_Event
  command: ""

---
PlatformAlarmEvent: !Extends_PlatformEvent
  external_alarm_type: ""   # initially this will be the so called "ref_id" in the RSN case
  external_timestamp: ""    # as reported from the RSN via OMS

DeviceCommsType: !enum (values=(DATA_DELIVERY_INTERRUPTION, OK), default=OK)
---
# To be used by transforms monitoring the health of data producers to report the status of the producers
DeviceCommsEvent: !Extends_Event
  state: !DeviceCommsType
  time_stamp: 0
  lapse_interval_seconds: 0
---

DeviceStatusType: !enum (values=(OUT_OF_RANGE, OK), default=OUT_OF_RANGE)
---

# To be used by transforms monitoring the health of data producers to report the status of the producers
DeviceStatusEvent: !Extends_Event
  state: !DeviceStatusType
  values: []
  time_stamps: []
  valid_values: []






# ------------------------------------------------------------------------------------
#                                  Infrastructure Level Events
# ------------------------------------------------------------------------------------

# ------------------------------------------------------------------------------------
# Exchange Event
# Events about Exchange Spaces and their communicating members
# ------------------------------------------------------------------------------------


RemoteQueueModifiedEvent: !Extends_PlatformEvent
  queue_size: 0

# ------------------------------------------------------------------------------------
# Org Event
# Events from an Org about its members or resources
# ------------------------------------------------------------------------------------
# The UserRoleModifiedEvent is a specialized event that gets published whenever a user's role within an Org changes.
# The origin is the org_id
# the sub_type is GRANT or REVOKE
UserRoleModifiedEvent: !Extends_Event
  user_id: ""
  role_name: ""


# ------------------------------------------------------------------------------------
# Ingestion Event
# Events about Ingestion of streams into datasets
# ------------------------------------------------------------------------------------
IngestionEvent: !Extends_ResourceModifiedEvent
  # origin: dataset id
  stream_id: ""
  status: 0
---

GranuleIngestedEvent: !Extends_IngestionEvent
  ingest_attributes: {}

GranuleIngestionErrorEvent: !Extends_IngestionEvent
  error_msg: ""


DatasetIngestionConfigurationEvent: !Extends_ResourceModifiedEvent
  type: !DatasetIngestionTypeEnum
  configuration: {}
  deleted: False # Temporary - until we have resource life cycle events
  resource_id: ""


# ------------------------------------------------------------------------------------
# Policy / Governance Event
# Events about policy in the system
# ------------------------------------------------------------------------------------

NegotiationEvent: !Extends_Event
  # The origin is the id of the negotiation id
  originator: ""

---

EnrollmentNegotiationStatusEvent: !Extends_NegotiationEvent

RequestRoleNegotiationStatusEvent: !Extends_NegotiationEvent
  role_name: ""

AcquireResourceNegotiationStatusEvent: !Extends_NegotiationEvent
  resource: ""

---

AcquireResourceExclusiveNegotiationStatusEvent: !Extends_AcquireResourceNegotiationStatusEvent

---

# The ResourcePolicyEvent is a little different that a Policy resource object event, in that it does not get fired
# when the underlying policy object is updated in the resource registry but by business login in the Policy Management
# Service as appropriate, like when it is assigned or removed from a resource
# The origin is the policy_id
ResourcePolicyEvent: !Extends_Event
  resource_id: ""
  resource_type: ""
  resource_name: ""
  op: ""      #Optional op name

# The ServicePolicyEvent is a little different that a Policy resource object event, in that it does not get fired
# when the underlying policy object is updated in the resource registry but by business login in the Policy Management
# Service as appropriate, like when it is assigned or removed from a service
# The origin is the policy_id
ServicePolicyEvent: !Extends_Event
  #If the service_name is not set to a specific name, then all services are assumed.
  service_name: ""
  op: ""   #Optional op name


# ------------------------------------------------------------------------------------
# Execution Event
# Events about compute resources (containers, processes, EPUs, EEs)
# ------------------------------------------------------------------------------------

ContainerConfigModifiedEvent: !Extends_Event

ContainerStateEnum: !enum (values=(START, STOP, TERMINATE, ERROR), default=START)

---
ContainerLifecycleEvent: !Extends_Event
  # The origin is the container id
  state: !ContainerStateEnum
  host: ""

ProcessLifecycleEvent: !Extends_Event
  # The origin is the process id
  state: !ProcessStateEnum
  container_id: ""
  process_type: ""
  process_name: ""

# Event for the scheduler's timer functionality
TimerEvent: !Extends_Event
# The Scheduler fires off this event so that services can react to it and perform tasks
SchedulerEvent: !Extends_Event

# a reload_user_info event generated when a notification is created, updated or deleted
ReloadUserInfoEvent: !Extends_Event
  notification_id: ""



# ------------------------------------------------------------------------------------
# !!! UNCATEGORIZED !!!! Events
# ------------------------------------------------------------------------------------


StreamAlarmType: !enum (values=(WARNING, ALERT, ALL_CLEAR), default=ALL_CLEAR)
---
StreamAlarmEvent: !Extends_ResourceEvent
  name: ''
  message: ''
  expr: ''
  stream_name: ''
  value_id: ''
  value: None

---

StreamWarningAlaramEvent: !Extends_StreamAlarmEvent
  type: StreamAlaramType.WARNING

StreamAlertAlarmEvent: !Extends_StreamAlarmEvent
  type: StreamAlaramType.ALERT
  
StreamAllClearAlarmEvent: !Extends_StreamAlarmEvent
  type: StreamAlaramType.ALL_CLEAR

---

# Used by DM UNS
ExampleDetectableEvent: !Extends_Event
  voltage: 0
  telemetry: 0
  temperature: 0

# output event from detection process
DetectionEvent: !Extends_Event
  message: ""             # Message field for this detection event
  condition: ""           # Concatenate the filter and make it a message
  original_origin: ""     # The origin from the event that was detected by the filter
  original_type: ""       # The type of the event that was detected by the filter


---

# Seems to be needed/used only by transforms when an error is encountered
ExceptionEvent: !Extends_Event
  exception_type: ""
  exception_message: ""

---

IngestionOverflow: !Extends_Event
  process_id: ""


