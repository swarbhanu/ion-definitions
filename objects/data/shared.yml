# Place shared objects in here that can be used by definitions in subdirectories


Phone:
  phone_number: ""
  phone_type: ""
  sms: 0

---

# Data structure for representing contact information uniformly across resources
ContactInformation:
  organization_name: ""
  individual_names_given: ""
  individual_name_family: ""
  street_address: ""
  city: ""
  postal_code: ""
  #state: ""
  country: ""
  phones: []  # list of phone objects
  email: ""
  administrative_area: ""
  position_name: ""        # the position or role of the contact
  roles: []                # list of strings of role names
  url: ""                  # url for the contact
  variables:   # Extension set of name/value pairs
  - name: ""
    value: ""

# Data structure for representing institution information uniformly across resources
Institution:
  name: ""
  phone: ""
  email: ""
  website: ""

# Object representing the geospatial location in a searchable index
GeospatialIndex:
  lat: 0.0
  lon: 0.0

GeospatialCoordinateReferenceSystem:
  geospatial_geodetic_crs: ""
  geospatial_vertical_crs: ""
  geospatial_latitude_units: ""
  geospatial_longitude_units: ""
  geospatial_vertical_units: ""
  geospatial_vertical_positive: ""


# Data structure for representing geospatial bounds uniformly across resources
GeospatialBounds:
  geospatial_latitude_limit_north: 0.0
  geospatial_latitude_limit_south: 0.0
  geospatial_longitude_limit_east: 0.0
  geospatial_longitude_limit_west: 0.0
  geospatial_vertical_min: 0.0
  geospatial_vertical_max: 0.0


GeospatialPoint:
  geospatial_vertical_location: 0.0
  geospatial_vertical_accuracy: 0.0
  geospatial_latitude: 0.0
  geospatial_longitude: 0.0
  geospatial_horizontal_accuracy: 0.0


TemporalBounds:
  name: ""
  start_datetime: ""
  end_datetime: ""

CustomAttribute:
  name: ""
  type: ""
  description: ""
  default: ""
  units: ""

#---

#DataFormat:
#  name: ""
#  description: ""
#  format_version_identifier: ""
#  between_record_delimiter: ""
#  # Mandatory for OOI Core Data, optional for external provider data
#  character_set: ""
#  unique_short_name: ""
#  long_name: ""
#  units: ""
#  # what is inserted when a real measurement is unavailable)
#  missing_value: ""
#  # a Java-style format specification for parsing a value from a string
#  value_format: ""
#  nominal_sampling_rate_minimum: "" # Hz
#  nominal_sampling_rate_maximum: "" # Hz

---
CodeReport:
  code_meaning: ""  # description of the meaning of the code value
  code_value: ""

---

ParameterCharacteristicsReport:
  parameter_name: ""        # The OOI ParameterDictionary name for the parameter being described.
  applicable_range_max: 0.0 # If the value is only valid within a particular range, this gives the maximum. Must be in same units as the value.
  applicable_range_min: 0.0 # If the value is only valid within a particular range, this gives the minimum. Must be in same units as the value.
  characteristic_name: ""   # Name of the characteristic being reported on. Common ones include accuracy, precision, and drift
  comments: ""              # Any additional important information about the characteristic
  source: ""                # Indicates the category of the source of the value, such as manufacturer, literature, etc
  units: ""                 # The units associated with the value of the characteristic
  value: 0.0                # The value of the characteristic

---

Parameter:
  standard_name: ""     # from CF standard names
  long_name: ""
  ooi_short_name: ""    # seven character code
  ioos_category: ""     # Selection from IOOS controlled vocabulary for parameters
  fill_value: ""        # A value used to represent missing or undefined data
  cdm_data_type: ""     # the THREDDS data type
  axis: ""              # for CF compliance, holds X, Y, Z or T for vars holding lat, lon, depth and time info
  code_reports: []      # provide the meaning of flags in CodeReport objects
  description: ""           # a human-readable description of the parameter
  reference_urls: []    # List of URLs with information about the data parameter
  units: ""
  ion_name: ""
  custom_attributes: {}



---

# Describes a physical device with a serial number, such as sensor, instrument and platform. Abstract base type.
Device: !Extends_TaskableResource
  serial_number: ""    # unique identifier of device provided by manufacturer
  controllable: True   # Whether the device can be sent a control message
  reference_urls: []   # References to pages about that individual device (e.g. Configuration diagram)
  uuid: ""             # the uuid provide by the manufacturer
  contacts: []         # Contacts for this device.
  # Additional attributes required for specific devices
  # Recommended format: {attribute1_name:value, attribute2_name:value}
  # The attribute names should align with the DeviceModel:custom_attributes:name field for this type of device.
  custom_attributes: {}



# Represents a grouping of devices by common characteristics, e.g. a vendor's make and model. Abstract base type.
DeviceModel: !Extends_InformationResource
  # weight of instrument in air, as configured for operation, in kg
  weight: 0.0
  # nominal voltage at which unit operates, in Volts
  voltage: 0.0
  # nominal wattage consumed by instrument, in Watts
  wattage: 0.0
  # The length of the instrument device in meters
  length: 0.0
  # The width of the instrument device in meters
  width: 0.0
  # The height  of the instrument device in meters
  height: 0.0
  # The name of the manufacturer
  manufacturer: ""
  manufacturer_url: ""
  # Location(s) where additional information about this model can be obtained
  reference_urls: []
  # Additional attributes required for specific models
  # Each entry in the list is a CustomAttribute object (see above)
  # A device of this model should then store these attribute values in the corresponding custom_attributes
  # of the device instance.
  custom_attributes: []
  has_clock: True      # Indicates whether the device has an internal clock or not
  parameter_characteristics_reports: []    # list of ParameterCharacteristicsReport objects
---

AttachmentType: !enum (values=(ASCII, BLOB, OBJECT), default=ASCII)
  # ASCII: the content is ASCII, e.g. JSON or BASE64 encoded by the application
  # BLOB: the content is a binary
  # OBJECT: the content is an arbitrary object, such as a dict, list

---

# Represents a separate information attached to a resource, such as a PDF or image file.
Attachment: !Extends_InformationResource
  attachment_type: !AttachmentType
  # type of attachment (PDF document, PNG image, etc); expressed as standard MIME types
  content_type: ""  # MIME type
  content: ""
  object_id: ""   # Associated object (resource) ID, for easier indexing
  # identity of the creator of the document (could be outside OOI)
  created_by: ""
  # identity of the last modifier of the document (could be outside OOI)
  modified_by: ""
  # Keywords indicating the type of attachment (e.g. user manual, log)
  keywords: []
  attachment_size: 0 # size of the attachment content field, in bytes

DeploymentTypeEnum: !enum (values=(PROCESS, SERVICE), default=PROCESS)

---

# Describes a range or extent over the dimensions that it represents.
# The frame of reference can include dimensions of geodetic (earth-based) space,
# time, or other cardinal or ordinal axes, and can be specified in absolute terms
# or relative to another frame of reference.
FrameOfReference: !Extends_InformationResource
  constraint_list: [] # set of constraints; GeospatialBounds, temporal bounds, composite, etc
  # KStocks: My assumption is that within a FrameOfReference, the coordinate reference system will not change.
  # So that there may be several geospatial bounds defined (I.e. several boxes defined) but that they will all
  #have the same CRS. So per FrameOfReferenceConstraint, there could be zero or one
  # GeospatialCoordinateReferenceSystem object, and zero to many GeospatialBounds, and that the
  # GeospatialCoordinateReferenceSystem would apply to all of the GeospatialBounds. 
  coordinate_reference_system: !GeospatialCoordinateReferenceSystem

---

# Describes a type of agent. Abstract base type.
AgentDefinition: !Extends_InformationResource
  agent_version: ""
#  connection_method: ""
#  event_publisher_origin: ""
  # (SYS) location of driver, used if class and module are NOT defined
  driver_uri: ""
  # (SYS) module for driver source code
  driver_module: ""
  # (SYS) class for driver source code
  driver_class: ""

# Describes a running or scheduled agent representing a single resource. Abstract base type.
AgentInstance: !Extends_InformationResource
  deployment_type: !DeploymentTypeEnum  # PROCESS=One process per resource; SERVICE: One service per resource type
#  exchange_name: ""
  configuration: {}
  agent_process_id: ""

---

StreamConfiguration:
  stream_name: ""                 # the tag that the driver uses to reference this stream
  parameter_dictionary_name: ""   # the name of the parameter dictionary that defines the contents of the stream
  records_per_granule: 0          # recommended number of records/samples to place in a single granule
  granule_publish_rate: 0         # max recommended seconds between publishing granules

---

# Describes a running or scheduled  agent representing a single device. Abstract base type.
DeviceAgent: !Extends_AgentDefinition
  stream_configurations: []     #set of StreamConfiguration objects that this agent/driver produces

---

ProcessStateEnum: !enum (values=(REQUESTED, WAITING, PENDING, RUNNING, TERMINATING, TERMINATED, FAILED, REJECTED, EXITED), default=REQUESTED)
ServiceStateEnum: !enum (values=(PENDING, READY, STEADY, FAILED), default=PENDING)

---

Term:
  term_value: ""
  vocabulary_name: ""
  term_url: ""
  vocabulary_url: ""

---


# Internal
EndShared:

---

# Governance related objects

# Enum for originator of the proposal
ProposalOriginatorEnum: !enum (values=(CONSUMER, PROVIDER, BROKER), default=CONSUMER)

# Enum for the status of the proposal
ProposalStatusEnum: !enum (values=(INITIAL, COUNTER, ACCEPTED, REJECTED, GRANTED), default=INITIAL)

---

# Object representing a current proposal for a service agreement. The proposal may contain several items of
# different type, or can be a composite of service agreement proposals.
ServiceAgreementProposal:
  negotiation_id: ""   #What negotiation resource is this part of
  originator: !ProposalOriginatorEnum
  consumer: ""     #Who will be the consumer of this proposal - typically a used id
  provider: ""     #Who will be the provider of this proposal - typically an org id
  broker: ""       #Optional identifier if proposal is brokered by third party
  sequence_num: 0  #Keeps track of the sequence of proposals within a negotiation
  proposal_status: !ProposalStatusEnum
  expiration: 0    #Expiration that will be used with resultant Commitment if accepted - 0 is unlimited
  conditions: {}   #Optional collection of additional conditions - not used in R2
  clauses: {}      #Optional collection of additional clauses - not used in R2

---

# Enum for the type of Negotiation
NegotiationTypeEnum: !enum (values=(REQUEST, INVITATION, BROKERED), default=REQUEST)

# Enum for the status of the Negotiation
NegotiationStatusEnum: !enum (values=(OPEN, ACCEPTED, REJECTED), default=OPEN)

---

# Describes a negotiation between multiple system participants with the intent of agreeing
# to a mutual contract with commitments if successful.
Negotiation: !Extends_InformationResource
  negotiation_type: !NegotiationTypeEnum
  negotiation_status: !NegotiationStatusEnum
  reason: ""     #Optional field to include a reason for a status
  #@ContentType=ServiceAgreementProposal
  proposals: []  # The last SAP in the list is considered the most recent one

---

#A subtype for all specific commitments
AbstractBaseCommitment:

---

# Represents a standing obligation of one ION participant to another ION participant.
# Commitments can be tracked and violations against commitments can be sanctioned.
Commitment: !Extends_InformationResource
  provider: ""
  consumer: ""
  expiration: 0    #Expiration of the Commitment - 0 is unlimited
  commitment: !AbstractBaseCommitment
